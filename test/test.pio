.program test

.define public PIN_NB400 4
.define public PIN_1MHZ 6

.wrap_target
main_loop:
//    wait 1 GPIO PIN_NB400   // wait for !select
    wait 0 GPIO PIN_1MHZ
    wait 0 GPIO PIN_NB400

    in PINS 16              // latch address
    jmp pin read            // jmp if read

write: // handle write, 6502 --> rp2040
    wait 1 GPIO PIN_1MHZ    // wait for clock
    wait 0 GPIO PIN_1MHZ

    in PINS 16              // latch and push data
    jmp main_loop

read: // handle read, rp2040 --> 6502 
    in PINS 16              // latch and push the address

    set y,3                 // flush the fifo
read_loop:
    pull noblock            // get the next word (or x if tx FIFO empty)
    mov x, osr              // save to x
    jmp y--, read_loop

    wait 1 GPIO PIN_1MHZ    // wait for clock

    pull noblock            // get the next word (or x if tx FIFO empty)
    mov x, osr              // save to x

                            // osr = 0000FFxx 
    out pins, 8             // output the value
                            // osr = 000000FF 
    out pindirs, 8 [31]     // Set data pin directions to out

    wait 0 GPIO PIN_1MHZ    // wait for clock
    
                            // osr = 00000000
    out pindirs, 8          // Restore data pin directions to in
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

const uint PIN_NB400 = test_PIN_NB400;
const uint PIN_1MHZ = test_PIN_1MHZ;
const uint PIN_R_NW = 7;
const uint PIN_D0 = 8;

void test_program_init(PIO pio, uint sm, uint offset) {
   pio_sm_config c = test_program_get_default_config(offset);
   sm_config_set_jmp_pin 	(&c, PIN_R_NW);  	
   sm_config_set_in_pins(&c, PIN_NB400);
   sm_config_set_out_pins(&c, PIN_D0, 8);
   //sm_config_set_set_pins(&c, PIN_D0, 5);
   sm_config_set_in_shift(&c, true, true, 32);
   pio_sm_init(pio, sm, offset, &c);
}

%}
